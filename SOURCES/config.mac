;
;	Copyright (C) 2021 by Ladislau Szilagyi
;
;	RTM/Z80 system configuration settings
;
DEBUG		equ 0	;1=debug mode ON: verify task SP, task TCB, dealloc, lists, etc.
SIM		equ 0	;1=Runs under Z80SIM, 0=Runs on RC2014(SC108+SC110)
DIG_IO		equ 0	;1=RC2014 Digital I/O module is used
CMD		equ 0	;1=CON CMD task is included
RSTS		equ 1	;1=use RST for list routines (not for SIM)
WATSON		equ 1	;1=Watson is used (not for SIM, not for EXTM512)
C_LANG		equ 1	;1=Support for C language API
IO_COMM		equ 0	;1=Support for async communications I/O
SC108		equ 0	;1=SC108 is used (32KB ROM, 128KB RAM)
MM		equ 0	;1=Memory Module is used (32KB ROM, 128KB RAM)
M512		equ 0	;1=512KB ROM & RAM module is used (512KB ROM, 512KB RAM)
BDOS		equ 0	;1=BDOS disk file support
LPT		equ 0	;1=Parallel Printer (Compatibility mode)
EXTM512		equ 0	;1=Extended RAM/ROM memory support for M512 (set-it to 0 if M512=0)
Z80ALL		equ 1	;1=Runs on Z80ALL
KIO		equ 1	;1=KIO is used, 0:SC110 is used
PS2		equ 1	;1=PS/2 keyboard for Z80ALL
DS1302		equ 0	;1=DS1302 for Z80ALL
SYSSTS		equ 1	;1=System status on VGA screen for Z80ALL
;
;	ROM/RAM options (only if SIM=0)
;
RAM128K		equ 1	;0=only 64K RAM, 1= 2 x 64K RAM available
ROM		equ 0	;1=sys code on ROM, 0=ROM not used
BOOT_CODE	equ 0	;1=bootstrap code included in code, 0=no bootstrap code
;
;	for MM or SC108, if ROM then set BOOT_CODE=1
;	for M512, set ROM=1 and BOOT_CODE=0
;
Z80SIM_CHECK    equ 0   ;1=check if CP/M executed on Z80SIM
;
LPT_CH_P_S	equ 350	;Characters per second for Parallel Printer
;
;	WARNING : if SIM=0 and WATSON=1 ==> RAM128 must be set to 1
;		(on RC2014, Watson needs 128 KB RAM)
;
NODEBUG		equ	1-DEBUG	
NOSIM		equ	1-SIM
NODIG_IO	equ	1-DIG_IO
NOCMD		equ	1-CMD
NORSTS		equ	1-RSTS
NOWATSON	equ	1-WATSON
NOC_LANG	equ	1-C_LANG
NOIO_COMM	equ	1-IO_COMM
NOROM		equ	1-ROM
NOBOOT_CODE	equ	1-BOOT_CODE
NORAM128K	equ	1-RAM128K
NOBDOS		equ	1-BDOS
NOM512		equ	1-M512
NOEXTM512	equ	1-EXTM512
NOSYSSTS	equ	1-SYSSTS
;
SIO_RING	equ	NOSIM .and. IO_COMM
NOSIO_RING	equ	1-SIO_RING
;
;TRIGGERS	equ 0	;Digital I/O module triggers: 1=ON,0=OFF (in this version, MUST BE SET to 0)
;
;	Version
;
V_M	equ	2
V_m	equ	6
;
;Memory map for Z80SIM version
;
;	0100H - 7B00H	sys code & data, apps code & data
;	7B00H - 7D00H	HEX loader buffers
;	7D00H - 7E00H	CleanReqB
;	7E00H - 7F00H	SIO receive buffer
;	7F00H - 8000H	Tasks vectors, sys data
;	8000H - 9FFFH	Dynamic Memory
;
;Memory map for RC2014 
;
;	0000H - 0100H	RSTs, sys code
;	0100H - D000H	INTs vector, sys code, apps code & read-only data
;	D000H - D100H	BSS: CleanReqB
;	D100H - D200H	BSS: SIO receive buffer
;	D200H - D400H	BSS: HEX loader buffers
;	D400H - DF00H	BSS: Watson pointers, sys & apps read-write data
;	DF00H - DFE3H	BSS: low - up routines (echo in Upper RAM)
;	DFE3H - DFE8H	BSS: RTM/Z80 exit code
;	DFE8H - E000H	BSS: regs & PC for breakpoint
;	E000H - FFFFH	Dynamic Memory
;
;Memory map for Z80ALL 
;
;	0000H - 0100H	RSTs, sys code
;	0100H - D000H	INTs vector, sys code, apps code & read-only data
;	D000H - D100H	BSS: CleanReqB
;	D100H - D200H	BSS: SIO receive buffer
;	D200H - D400H	BSS: HEX loader buffers
;	D400H - D500H	BSS: PS2 receive buffer
;	D500H - DEF6H	BSS: sys & apps read-write data
;	DEF6H - DF00H	BSS: 32KB RAM banks routines
;	DF00H - E000H	BSS: move bank routines
;	E000H - FFFFH	Dynamic Memory
;
;Memory map for RC2014 512KB RAM/ROM + EXTM512
;
;	0000H - 0100H	RSTs, sys code
;	0100H - 4000H	sys code
;	4000H - 8000H	ROM overlays (app code & read-only data)
;	8000H - 8100H	BSS: CleanReqB
;	8100H - 8200H	BSS: SIO receive buffer
;	8200H - 8400H	BSS: HEX loader buffers
;	8400H - A000H	BSS: sys, app read/write data
;	A000H - BFFFH	Dynamic Memory
;	C000H - FFFFH	512KB Extended Dynamic Memory
;
;       I/O opcodes
;
IO_IDLE         equ     0	;incoming input stored in SIO ring buffer
IO_WRITE        equ     1	;incoming input NOT stored in SIO ring buffer
IO_READ         equ     2       ;with echo, <CR> terminates read, null appended
IO_RAW_WRITE	equ	4	;incoming input stored in SIO ring buffer
IO_RAW_READ     equ     8       ;without echo, uses SIO receive buffer, timeout 
;
IF	PS2
;
;	PS/2 ports
;
PS2Data	equ 0f4h	;PS2 keyboard input
PS2Stat	equ 0f5h	;PS2 keyboard status, bit 0 indicate data available
;
PS2BUF	equ	0D400H	;PS2 ring buffer
;
ENDIF

IF	KIO
;
;       CTC ports
;
CTC_0   equ     84H
CTC_1   equ     85H
CTC_2   equ     86H
CTC_3   equ     87H
;
;       SIO Ports
;
SIO_A_C equ     89H
SIO_A_D equ     88H
SIO_B_C equ     8BH
SIO_B_D equ     8AH
;
;	PIO Ports
;
PIO_A_D	equ	80H
PIO_B_D	equ	81H
PIO_A_C	equ	82H
PIO_B_C	equ	83H
;
KIO_CMD	equ	8EH
;
ELSE
;
;       CTC ports (as in the RC2014 SIO/2 + CTCModule For RC2014)
;
CTC_0   equ     88H
CTC_1   equ     89H
CTC_2   equ     8AH
CTC_3   equ     8BH
;
;       SIO Ports (as in the RC2014 SIO/2 + CTCModule For RC2014)
;
SIO_A_C equ     80H
SIO_A_D equ     81H
SIO_B_C equ     82H
SIO_B_D equ     83H
;
;	PIO Ports (as in the RC2014 PIO Module)
;
PIO_A_D	equ	68H
PIO_B_D	equ	69H
PIO_A_C	equ	6AH
PIO_B_C	equ	6BH
;
ENDIF

IF	Z80ALL

B32K_PORT	equ	1FH

MOVEBYTES32K	equ	0DEF6H

ENDIF
;
BMEM_SIZE	equ	2000H	
;
B_H_SIZE	equ	6	;sizeof(bElement)
;
IF	SIM
BMEM_BASE	equ	08000H	;MUST be multiple of 0x2000
ELSE
IF	EXTM512
BMEM_BASE	equ	0A000H	;MUST be multiple of 0x2000 
Buf16K		equ	0C000H	;address of 16KB dynamic memory bank
ELSE
BMEM_BASE	equ	0E000H	;MUST be multiple of 0x2000 
ENDIF	;EXTM512
ENDIF	;SIM
;
IF	ROM
_main	equ	2800H		; !!! Set it according to the RTM/Z80 size 
ENDIF
;
IF	SIM

MACRO	SET_LEDS	value
ENDM

MACRO	OUT_LEDS	bitnr
ENDM

MACRO	TOGGLE_LEDS	bitnr
ENDM

;MACRO	TEST_TRIGGER	bitnr
;ENDM

ENDIF
;

TICS_PER_SEC	equ	200

;
;	Addresses of RAM BSS routines
;
UP_TO_LOW_6W	equ	0DF4DH
UP_TO_LOW_4B	equ	0DF7CH
LOW_TO_UP_6W	equ	0DF91H
LOW_TO_UP_4B	equ	0DFC7H
RTM_EXIT	equ	0DFE3H
;
;	Address of Registers saved after a breakpoint
;	order: AF,BC,DE,HL,AF',BC',DE',HL',IX,IY,SP,PC
;
_PC	equ	0DFFEH
_REGS	equ	0DFE8H

IF	EXTM512
STARTUP_SP	equ	0A000H
ELSE
STARTUP_SP	equ	UP_TO_LOW_6W
ENDIF

MACRO	PUSH_REGS
			;first regs
	push	af
	push	hl
	push	de
	push	bc
	push	ix
	push	iy
			;then regs'
	ex	af,af'
	exx
	push	af
	push	hl
	push	de
	push	bc
	exx
	ex	af,af'

ENDM

MACRO	POP_REGS
			;first regs'
	ex	af,af'
	exx
	pop	bc
	pop	de
	pop	hl
	pop	af
	exx
	ex	af,af'
			;then regs
	pop	iy
	pop	ix
	pop	bc
	pop	de
	pop	hl
	pop	af
ENDM

IF	SYSSTS

;	coordinates in the VGA screen
;
StsROW		equ	23
PriCOL		equ	7
RunCOL		equ	22
WaitCOL		equ	30
;
;	VGA TCB table
;
TABTCB_SIZE	equ	10		;record size
					;offsets
OFF_TCB		equ	0
OFF_CURSOR	equ	2
OFF_TICKS	equ	4
OFF_FREESTACK	equ	8

; 
	GLOBAL	MarkLen, TaskCnt, Bin2Hex, DisplaySysScr, __CrtLocate, TabTCB, TabTCB_P

	MACRO	DynMarkOn
;
;	Type dynamic memory block mark
;	DE=pointer of dynamic memory buffer
;	DE not affected
;
	ld	h,d
	ld	l,e		;HL=DE
	or	a		;CARRY=0
	ld	bc,BMEM_BASE
	sbc	hl,bc		;HL=offset in dynamic memory buffer 000xxxxx xxxx0000
				;build cursor 
	ld	c,1
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	bit	0,h
	jr	z,111f
	inc	c
111:
	ld	b,l		;BC=cursor
	ld	a,(MarkLen)
	ld	l,a
	ld	a,' ' + 80H
222:				;type mark
	out	(c),a
	inc	b
	dec	l
	jr	nz,222b
;
IF	SIO_RING
	call	GetSIOChars
ENDIF

	ENDM

	MACRO	DynMarkOff
;
;	Erase dynamic memory block mark
;	DE=pointer of dynamic memory buffer
;	BC,DE not affected
;
	push	bc		;save BC

	ld	h,d
	ld	l,e		;HL=DE
	or	a		;CARRY=0
	ld	bc,BMEM_BASE
	sbc	hl,bc		;HL=offset in dynamic memory buffer 000xxxxx xxxx0000
				;build cursor 
	ld	c,1
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	srl	h
	rr	l
	bit	0,h
	jr	z,333f
	inc	c
333:
	ld	b,l		;BC=cursor
	ld	a,(MarkLen)
	ld	l,a
	ld	a,' '
444:				;erase mark
	out	(c),a
	inc	b
	dec	l
	jr	nz,444b

	pop	bc		;restore BC
;
IF	SIO_RING
	call	GetSIOChars
ENDIF

	ENDM

	MACRO	SaveMarkLen
;
;	Save dynamic memory marks length
;	C=block size (0,1...)
;
	ld	b,c		;save B=C
	ld	a,1
	inc	c
1:	dec	c
	jr	z,2f
	add	a,a
	jr	1b
2:
	ld	(MarkLen),a
	ld	c,b		;restore C

	ENDM
;
CURSOR_OFF	equ	23
TICS_OFF	equ	25

	MACRO	AddTick

	ld	hl,(_RunningTask)
	ld	bc,TICS_OFF
	add	hl,bc
	inc	(hl)
	jr	nz,555f
	inc	hl
	inc	(hl)
	jr	nz,555f
	inc	hl
	inc	(hl)
	jr	nz,555f
	inc	hl
	inc	(hl)
555:
	ENDM

	MACRO	AddTask
;
;	BC=TCB
;	BC not affected
;
	push	bc		;save TCB

	ld	hl,(TabTCB_P)	;store TCB in TCB table
	ld	(hl),c
	inc	hl
	ld	(hl),b
	ld	de,TABTCB_SIZE-1
	add	hl,de
	ld	(TabTCB_P),hl

	ld	hl,TaskCnt
	ld	a,StsROW
	add	(hl)		;A=row in screen
	inc	(hl)

	ld	hl,CURSOR_OFF
	add	hl,bc

	push	hl		;HL=where to store the cursor

	ld	hl,PRI_OFF
	add	hl,bc

	ld	c,a		;C=row in screen
	ld	b,PriCOL	;B=col in screen

	call	__CrtLocate	;BC=cursor (B=col,C=row)

	ld	a,(hl)		;get task priority
	call	Bin2Hex		;D=A=high, E=low

	out	(c),a		;high
	inc	b
	ld	a,e
	out	(c),a		;low

	ld	a,14		;skip to Running Status's col 
	add	a,b
	ld	b,a		;B=col Running Status

	pop	hl		;HL=where to store the cursor
	ld	(hl),c		;store the "Running Status" cursor
	inc	hl
	ld	(hl),b
				;set Ticks=0
	xor	a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a

	pop	bc		;Restore TCB

	ENDM

	MACRO	OffRun
;
;	HL=TCB
;	HL,DE not affected
;
	push	de		;save DE
	ld	e,l
	ld	d,h		;DE=HL
	ld	bc,CURSOR_OFF
	add	hl,bc
	ld	c,(hl)		;load cursor
	inc	hl
	ld	b,(hl)
	ld	a,' '
	out	(c),a
	ex	de,hl		;restore HL
	pop	de		;restore DE

	ENDM

	MACRO	OnRun
;
;	HL=TCB
;	HL not affected
;
	ld	e,l
	ld	d,h		;save DE=HL
	ld	bc,CURSOR_OFF
	add	hl,bc
	ld	c,(hl)		;load cursor
	inc	hl
	ld	b,(hl)
	ld	a,' ' + 80H
	out	(c),a
	ex	de,hl		;restore HL

	ENDM

	MACRO	OffWait
;
;	HL=TCB
;	HL not affected
;
	ld	e,l
	ld	d,h		;save DE=HL
	ld	bc,CURSOR_OFF
	add	hl,bc
	ld	c,(hl)		;load cursor
	inc	hl
	ld	b,(hl)
	ld	a,8		;skip to Waiting Status col
	add	a,b
	ld	b,a
	ld	a,' '
	out	(c),a
	ex	de,hl		;restore HL

	ENDM

	MACRO	OnWait
;
;	HL=TCB
;	HL not affected
;
	ld	e,l
	ld	d,h		;save DE=HL
	ld	bc,CURSOR_OFF
	add	hl,bc
	ld	c,(hl)		;load cursor
	inc	hl
	ld	b,(hl)
	ld	a,8		;skip to Waiting Status col
	add	a,b
	ld	b,a
	ld	a,' ' + 80H
	out	(c),a
	ex	de,hl		;restore HL

	ENDM

ENDIF

