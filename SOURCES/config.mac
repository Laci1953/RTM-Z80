;
;	Copyright (C) 2021 by Ladislau Szilagyi
;
;	RTM/Z80 system configuration settings
;
DEBUG		equ 1	;1=debug mode ON: verify task SP, task TCB, dealloc, lists, etc.
CPM		equ 0	;1=Runs under CP/M, 0=Runs on RC2014(SC108+SC110)
DIG_IO		equ 1	;1=RC2014 Digital I/O module is used
CMD		equ 0	;1=CON CMD task is included
RSTS		equ 1	;1=use RST for list routines (not for CP/M)
WATSON		equ 1	;1=Watson is used (not for CP/M)
C_LANG		equ 1	;1=Support for C language API
IO_COMM		equ 0	;1=Support for async communications I/O
MM		equ 0	;1=Memory Module is used, 0=SC108 is used
;
;	ROM/RAM options (only if CPM=0)
;
RAM128K		equ 0	;0=only 64K RAM, 1= 2 x 64K RAM available
ROM		equ 0	;1=sys code on ROM, 0=ROM not used
BOOT_CODE	equ 0	;1=bootstrap code included in code, 0=no bootstrap code
;
Z80SIM_CHECK    equ 0   ;1=check if CP/M executed on Z80SIM
;
NODEBUG		equ	1-DEBUG	
NOCPM		equ	1-CPM
NODIG_IO	equ	1-DIG_IO
NOCMD		equ	1-CMD
NORSTS		equ	1-RSTS
NOWATSON	equ	1-WATSON
NOC_LANG	equ	1-C_LANG
NOIO_COMM	equ	1-IO_COMM
NOMM		equ	1-MM
NOROM		equ	1-ROM
NOBOOT_CODE	equ	1-BOOT_CODE
NORAM128K	equ	1-RAM128K
;
SIO_RING	equ	NOCPM .and. IO_COMM
NOSIO_RING	equ	1-SIO_RING
;
;TRIGGERS	equ 0	;Digital I/O module triggers: 1=ON,0=OFF (in this version, MUST BE SET to 0)
;
;Memory map for CP/M version
;
;	0100H - 7B00H	sys code & data, apps code & data
;	7B00H - 7D00H	HEX loader buffers
;	7D00H - 7E00H	CleanReqB
;	7E00H - 7F00H	SIO receive buffer
;	7F00H - 8000H	Tasks vectors, sys data
;	8000H - 9FFFH	Dynamic Memory
;	A000H - DC00H	reserved for ZSID.COM
;	DC00H - FFFFH	reserved for CP/M
;
;Memory map for RC2014 SC108 (LOW 64K RAM; HIGH 64K RAM = snapshot buffer)
;
;	0000H - 0100H	RSTs, sys code
;	0100H - D000H	INTs vector, sys code, apps code & read-only data
;	D000H - D100H	BSS: CleanReqB
;	D100H - D200H	BSS: SIO receive buffer
;	D200H - D400H	BSS: HEX loader buffers
;	D400H - DF29H	BSS: Watson pointers, sys & apps read-write data
;	DF29H - DFE3H	BSS: low - up routines (echo in Upper RAM)
;	DFE3H - DFE8H	BSS: RTM/Z80 exit code
;	DFE8H - E000H	BSS: regs & PC for breakpoint
;	E000H - FFFFH	Dynamic Memory
;
;       I/O opcodes
;
IO_IDLE         equ     0	;incoming input stored in SIO ring buffer
IO_WRITE        equ     1	;incoming input NOT stored in SIO ring buffer
IO_READ         equ     2       ;with echo, <CR> terminates read, null appended
IO_RAW_WRITE	equ	4	;incoming input stored in SIO ring buffer
IO_RAW_READ     equ     8       ;without echo, uses SIO receive buffer, timeout 
;
;----------------------------------------------------------------------NOCPM
COND    NOCPM

;---------------------------------------------------------------NOMM
COND	NOMM

MEMP_PORT       equ     38H

;       ROM     0000 to 8000H
;
ROM_OUT_CMD     equ     00000001B
ROM_IN_CMD      equ     00000000B
LOWER_64RAM     equ     00000000B
UPPER_64RAM     equ     10000000B
;
MACRO	LOW_RAM
	ld	a,LOWER_64RAM .or. ROM_OUT_CMD
	out	(MEMP_PORT),a
ENDM

MACRO	UP_RAM
	ld	a,UPPER_64RAM .or. ROM_OUT_CMD
	out	(MEMP_PORT),a	
ENDM

MACRO	ROM_IN
	ld	a,LOWER_64RAM .or. ROM_IN_CMD
	out	(MEMP_PORT),a
ENDM

MACRO	ROM_OUT
	ld	a,LOWER_64RAM .or. ROM_OUT_CMD
	out	(MEMP_PORT),a
ENDM

MACRO	ROM_IN_LOW_RAM
	ld	a,LOWER_64RAM .or. ROM_IN_CMD
	out	(MEMP_PORT),a
ENDM

MACRO	ROM_IN_UP_RAM
	ld	a,UPPER_64RAM .or. ROM_IN_CMD
	out	(MEMP_PORT),a	
ENDM

ENDC
;---------------------------------------------------------------NOMM
;---------------------------------------------------------------MM
COND	MM

MM_RAM_P	equ	30H

MM_UP_RAM	equ	1
MM_LOW_RAM	equ	0

MACRO	LOW_RAM
	ld	a,MM_LOW_RAM
	out	(MM_RAM_P),a
ENDM

MACRO	UP_RAM
	ld	a,MM_UP_RAM
	out	(MM_RAM_P),a
ENDM

MM_ROM_P	equ	38H

MM_ROM_IN	equ	0
MM_ROM_OUT	equ	1

MACRO	ROM_IN
	ld	a,MM_ROM_IN
	out	(MM_ROM_P),a
ENDM

MACRO	ROM_OUT
	ld	a,MM_ROM_OUT
	out	(MM_ROM_P),a
ENDM

MACRO	ROM_IN_LOW_RAM
	LOW_RAM
ENDM

MACRO	ROM_IN_UP_RAM
	UP_RAM
ENDM

ENDC
;---------------------------------------------------------------MM
;
;       CTC ports (as in the RC2014 SIO/2 + CTCModule For RC2014)
;
CTC_0   equ     88H
CTC_1   equ     89H
CTC_2   equ     8AH
CTC_3   equ     8BH
;
;       SIO Ports (as in the RC2014 SIO/2 + CTCModule For RC2014)
;
SIO_A_C equ     80H
SIO_A_D equ     81H
SIO_B_C equ     82H
SIO_B_D equ     83H
;
;---------------------------------------------------------------DIG_IO
COND	DIG_IO
;
	GLOBAL	IO_LEDS
;
LED_PORT	equ	0
;
;	LED definitions - bit affected
;
RTMZ80		equ	0	;RTM/Z80 running
CLOCK		equ	1	;1 second ON/OFF
ERR_STACK	equ	2	;stack warning 
ERR_TCB		equ	3	;wrong TCB
ERR_SEM		equ	4	;wrong Semaphore
ERR_FULLMEM	equ	5	;no more free memory
ERR_ESC		equ	6	;SIO A External Status Change
ERR_SRC		equ	7	;SIO A Special Receive Condition
;
;	Trigger definitions - bit affected
;
SHUTDOWN	equ	0	;shutdown RTM/Z80
ROUNDROBIN	equ	1	;switch to RoundRobin algorithm
TESTFREEMEM	equ	2	;test free memory
SNAPSHOT	equ	3	;moves 64K to UP_RAM and shuts down
;

MACRO	SET_LEDS	value
	ld	a,value
	ld	(IO_LEDS),a
	out	(LED_PORT),a
ENDM

MACRO	OUT_LEDS	bitnr
	ld	a,(IO_LEDS)
	set	bitnr,a
	ld	(IO_LEDS),a
	out	(LED_PORT),a
ENDM

MACRO	TOGGLE_LEDS	bitnr
	ld	a,(IO_LEDS)
	bit	bitnr,a
	set	bitnr,a
	jr	z,7777f
	res	bitnr,a
7777:
	ld	(IO_LEDS),a
	out	(LED_PORT),a
ENDM

;MACRO	TEST_TRIGGER	bitnr
;	in	a,(LED_PORT)
;	bit	bitnr,a
;ENDM

ENDC
;---------------------------------------------------------------DIG_IO
ENDC
;----------------------------------------------------------------------NOCPM

BMEM_SIZE	equ	2000H	

B_H_SIZE	equ	6	;sizeof(bElement)

COND	CPM
BMEM_BASE	equ	08000H	;MUST be multiple of 0x2000
ENDC
COND	NOCPM
BMEM_BASE	equ	0E000H	;MUST be multiple of 0x2000 
ENDC

COND	ROM
_main	equ	2800H		;User code starts at 2800H
ENDC

;					CPM
COND	CPM

MACRO	SET_LEDS	value
ENDM

MACRO	OUT_LEDS	bitnr
ENDM

MACRO	TOGGLE_LEDS	bitnr
ENDM

;MACRO	TEST_TRIGGER	bitnr
;ENDM

;					CPM
ENDC

COND	CPM
TICS_PER_SEC	equ	100
ENDC
COND	NOCPM
TICS_PER_SEC	equ	200
ENDC

MACRO PUSH_ALL_REGS
	push	af
	push	hl
	push	de
	push	bc
	push	ix
	push	iy
ENDM

MACRO POP_ALL_REGS
	pop	iy
	pop	ix
	pop	bc
	pop	de
	pop	hl
	pop	af
ENDM

;
;	Addresses of RAM BSS routines
;
UP_TO_LOW_6W	equ	0DF4DH
UP_TO_LOW_4B	equ	0DF7CH
LOW_TO_UP_6W	equ	0DF91H
LOW_TO_UP_4B	equ	0DFC7H
RTM_EXIT	equ	0DFE3H

;	Address of Registers saved after a breakpoint
;	order: AF,BC,DE,HL,AF',BC',DE',HL',IX,IY,SP,PC
;
_PC	equ	0DFFEH
_REGS	equ	0DFE8H

